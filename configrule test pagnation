AWSTemplateFormatVersion: '2010-09-09'
Description: Custom AWS Config rule to detect IAM access keys older than 22 months and integrate with Security Hub.

Resources:
  # IAM Role for Lambda function with necessary permissions
  IAMRoleForLambda:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IAMAccessKeyRotationCheckRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaIAMAccessKeyRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListUsers         # Allows the Lambda to list IAM users.
                  - iam:ListAccessKeys    # Allows the Lambda to list access keys for each user.
                  - config:PutEvaluations # Allows the Lambda to report compliance status to AWS Config.
                  - securityhub:BatchImportFindings # Allows the Lambda to send findings to AWS Security Hub.
                  - logs:CreateLogGroup   # Allows the Lambda to create CloudWatch log groups.
                  - logs:CreateLogStream  # Allows the Lambda to create CloudWatch log streams.
                  - logs:PutLogEvents     # Allows the Lambda to write logs to CloudWatch.
                Resource: '*'

  # Lambda Function for evaluating IAM access keys
  IAMAccessKeyRotationCheckFunction:
    Type: AWS::Lambda::Function
    DependsOn: IAMRoleForLambda  # Ensures the role is created before the Lambda function
    Properties:
      FunctionName: IAMAccessKeyRotationCheckFunction
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt IAMRoleForLambda.Arn
      Timeout: 300  # Set the timeout to handle large data processing
      Code:
        ZipFile: |
          import boto3
          import logging
          from datetime import datetime, timedelta

          # Initialize AWS clients for IAM, Config, and Security Hub
          iam_client = boto3.client('iam')
          config_client = boto3.client('config')
          securityhub_client = boto3.client('securityhub')

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  threshold_days = 22 * 30  # Threshold set to 22 months in days
                  non_compliant_keys = []  # List to store non-compliant access keys

                  # Use paginator for listing all IAM users
                  paginator = iam_client.get_paginator('list_users')
                  for page in paginator.paginate():  # List all IAM users
                      users = page['Users']
                      for user in users:
                          try:
                              # Use paginator for listing access keys for each user
                              key_paginator = iam_client.get_paginator('list_access_keys')
                              for key_page in key_paginator.paginate(UserName=user['UserName']):
                                  access_keys = key_page['AccessKeyMetadata']
                                  for key in access_keys:
                                      # Calculate the key's age in days since its creation
                                      key_age_days = (datetime.now(key['CreateDate'].tzinfo) - key['CreateDate']).days

                                      # Mark the key as non-compliant if its age exceeds the threshold
                                      if key['Status'] == 'Active' and key_age_days >= threshold_days:
                                          non_compliant_keys.append({
                                              'UserName': user['UserName'],
                                              'AccessKeyId': key['AccessKeyId'],
                                              'CreationDate': key['CreateDate'].strftime('%Y-%m-%d'),
                                              'KeyAgeDays': key_age_days
                                          })

                          except Exception as e:
                              logger.error(f"Error processing access keys for user {user['UserName']}: {e}")

                  # Report compliance status to AWS Config
                  compliance_type = 'NON_COMPLIANT' if non_compliant_keys else 'COMPLIANT'
                  config_client.put_evaluations(
                      Evaluations=[
                          {
                              'ComplianceResourceType': 'AWS::IAM::User',
                              'ComplianceResourceId': 'IAMAccessKeyCheck',
                              'ComplianceType': compliance_type,
                              'OrderingTimestamp': datetime.now()
                          },
                      ],
                      ResultToken=event.get('resultToken', 'NoTokenProvided')
                  )

                  # Send non-compliant findings to AWS Security Hub
                  if non_compliant_keys:
                      findings = []
                      for key in non_compliant_keys:
                          findings.append({
                              'SchemaVersion': '2018-10-08',
                              'Id': f'{key["UserName"]}/{key["AccessKeyId"]}',
                              'ProductArn': f'arn:aws:securityhub:{context.invoked_function_arn.split(":")[3]}:aws:product/aws/securityhub',
                              'GeneratorId': 'iam-access-key-rotation-check',
                              'AwsAccountId': context.invoked_function_arn.split(":")[4],
                              'Types': ['Software and Configuration Checks/AWS Security Best Practices'],
                              'CreatedAt': datetime.now().isoformat(),
                              'UpdatedAt': datetime.now().isoformat(),
                              'Severity': {'Label': 'HIGH'},
                              'Title': 'IAM Access Key Rotation Best Practice Violation',
                              'Description': f'Active IAM access key {key["AccessKeyId"]} for user {key["UserName"]} is older than 22 months (Key Age: {key["KeyAgeDays"]} days).',
                              'Resources': [
                                  {
                                      'Type': 'AwsIamAccessKey',
                                      'Id': key["AccessKeyId"],
                                      'Partition': 'aws',
                                      'Region': context.invoked_function_arn.split(":")[3]
                                  }
                              ],
                              'Compliance': {'Status': 'FAILED'},
                              'RecordState': 'ACTIVE'
                          })
                      securityhub_client.batch_import_findings(Findings=findings)

                  logger.info(f"Compliance type reported: {compliance_type}")
                  return {
                      'statusCode': 200,
                      'compliance_type': compliance_type
                  }

              except Exception as e:
                  logger.error(f"General error occurred: {e}")

  # AWS Config Custom Rule to trigger the Lambda function
  IAMAccessKeyRotationCheckRule:
    Type: AWS::Config::ConfigRule
    DependsOn: IAMAccessKeyRotationCheckFunction  # Ensures the Lambda function is created before the Config rule
    Properties:
      ConfigRuleName: IAMAccessKeyRotationCheckRule
      Description: Detects IAM access keys that are active and older than 22 months.
      Source:
        Owner: CUSTOM_LAMBDA
        SourceIdentifier: !GetAtt IAMAccessKeyRotationCheckFunction.Arn
      MaximumExecutionFrequency: TwentyFour_Hours

Outputs:
  LambdaFunctionName:
    Description: The name of the Lambda function for IAM access key checks.
    Value: !Ref IAMAccessKeyRotationCheckFunction

  ConfigRuleName:
    Description: The name of the AWS Config custom rule.
    Value: !Ref IAMAccessKeyRotationCheckRule

  IAMRoleForLambda:
    Description: The IAM Role used by the Lambda function.
    Value: !Ref IAMRoleForLambda
