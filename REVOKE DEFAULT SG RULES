Here’s an overview of how this Lambda function works and the types of events that trigger it:

Key Elements:

	•	Request Type: The function checks the value of the RequestType field in the event object. This field is commonly included when CloudFormation invokes a Lambda function. It can have values like Create, Update, or Delete.
	•	Create: This is triggered when a new CloudFormation stack is being created.
	•	Update: This is triggered when an existing stack is being updated.
	•	Delete: This is triggered when a stack is being deleted.
	•	Stack-specific Event Data:
	•	The function extracts information such as StackId, LogicalResourceId, and RequestId, which are specific to the CloudFormation stack. These fields ensure that the Lambda function can identify the stack it is working with.
	•	CloudFormation Actions:
	•	Based on the request type (e.g., Create, Update, Delete), the Lambda function performs actions such as revoking security group egress rules using the AWS EC2 client (boto3.client('ec2')).
	•	The Lambda also processes the ResourceProperties field, which is typically included in CloudFormation templates and holds resource-specific data.

Triggering Events:

	•	This Lambda function will only trigger in response to CloudFormation events because it relies on CloudFormation-specific fields such as RequestType, StackId, and LogicalResourceId.
	•	It is most likely associated with a specific CloudFormation resource type or custom resource defined in a template. This means the function will be invoked when a CloudFormation template that includes this Lambda function (as a resource or custom resource) is deployed, updated, or deleted.

Example Use Cases:

	•	CloudFormation Stack Creation (Create): The Lambda will be invoked when a new stack that includes this Lambda function in the template is created.
	•	CloudFormation Stack Update (Update): The Lambda will be triggered when an existing stack (which references this function) is updated.
	•	CloudFormation Stack Deletion (Delete): The Lambda will handle the cleanup tasks (like removing egress rules) when the CloudFormation stack is deleted.

Conclusion:

	•	This Lambda function is designed to trigger only when a CloudFormation stack that includes it (as a resource or custom resource) is created, updated, or deleted.
	•	It will not trigger for general CloudFormation templates unless the specific stack contains this Lambda function as part of the deployment.

Let me know if you need more details or have further questions!


----------------





import sys, json, boto3
import cfresponse
from botocore.exceptions import ClientError
import logging
import os

# Set up logging
LOG_LEVEL = os.getenv('LOG_LEVEL', logging.INFO)
logger = logging.getLogger()
logger.setLevel(LOG_LEVEL)

def handler(event, context):
    logger.info(f"Input Event: {json.dumps(event)}")

    try:
        # Check if this is a CloudFormation invocation (StackId, LogicalResourceId, and RequestId)
        if 'StackId' in event and 'LogicalResourceId' in event and 'RequestId' in event:
            # This is a CloudFormation invocation
            logger.info("CloudFormation invocation detected")

            StackName = event['StackId']  # The CloudFormation Stack ID
            LogicalResourceId = event['LogicalResourceId']  # Logical Resource ID in the stack
            UniqueId = event['RequestId']  # Unique request ID for this CloudFormation request
            props = event['ResourceProperties']  # Resource properties provided by CloudFormation

            logger.info(f"CloudFormation StackId: {StackName}, LogicalResourceId: {LogicalResourceId}, RequestId: {UniqueId}")
            logger.info(f"CloudFormation Resource Properties: {json.dumps(props)}")

            # AWS EC2 client to interact with security groups
            client = boto3.client('ec2')
            get_sg = client.describe_security_groups(Filters=[{"Name": "group-name", "Values": ["default"]}])

            logger.info(f"Response from describe_security_groups call: {get_sg}")

            account_id = context.invoked_function_arn.split(":")[4]

            # Process the default security group
            for sg in get_sg['SecurityGroups']:
                if sg['GroupName'] == "default":
                    # Revoke egress rules if present
                    if len(sg['IpPermissions']) > 0:
                        response = client.revoke_security_group_egress(
                            GroupId=sg['GroupId'],
                            IpPermissions=[{
                                'IpProtocol': '-1',
                                'IpRanges': [],
                                'PrefixListIds': [],
                                'UserIdGroupPairs': [{
                                    'GroupId': sg['GroupId'],
                                    'UserId': account_id
                                }]
                            }]
                        )
                        logger.info(f"Response from revoke_security_group_egress call: {response}")

                    # Revoke ingress rules if present
                    if len(sg['IpPermissionsEgress']) > 0:
                        response = client.revoke_security_group_ingress(
                            GroupId=sg['GroupId'],
                            IpPermissions=[{
                                'IpProtocol': '-1',
                                'IpRanges': [],
                                'PrefixListIds': [],
                                'UserIdGroupPairs': [{
                                    'GroupId': sg['GroupId'],
                                    'UserId': account_id
                                }]
                            }]
                        )
                        logger.info(f"Response from revoke_security_group_ingress call: {response}")

            logger.info(f"Completed default security group update for {sg['GroupId']}")

            # Check the CloudFormation RequestType (e.g., Create, Update, Delete)
            if event['RequestType'] == 'Delete':
                logger.info("Skipping deletion action")
            else:
                # Send a success response to CloudFormation if 'ResponseURL' is present
                if 'ResponseURL' in event:
                    cfresponse.send(event, context, cfresponse.SUCCESS, {})
                else:
                    logger.warning("CloudFormation ResponseURL not provided, skipping cfresponse.")

        # Handle non-CloudFormation invocation (standard Lambda invoke)
        else:
            logger.info("Normal Lambda invocation detected")

            client = boto3.client('ec2')
            get_sg = client.describe_security_groups(Filters=[{"Name": "group-name", "Values": ["default"]}])

            logger.info(f"Response from describe_security_groups call: {get_sg}")

            account_id = context.invoked_function_arn.split(":")[4]

            # Process the default security group in a normal invocation
            for sg in get_sg['SecurityGroups']:
                if sg['GroupName'] == "default":
                    # Revoke egress rules if present
                    if len(sg['IpPermissions']) > 0:
                        response = client.revoke_security_group_egress(
                            GroupId=sg['GroupId'],
                            IpPermissions=[{
                                'IpProtocol': '-1',
                                'IpRanges': [],
                                'PrefixListIds': [],
                                'UserIdGroupPairs': [{
                                    'GroupId': sg['GroupId'],
                                    'UserId': account_id
                                }]
                            }]
                        )
                        logger.info(f"Response from revoke_security_group_egress call: {response}")

                    # Revoke ingress rules if present
                    if len(sg['IpPermissionsEgress']) > 0:
                        response = client.revoke_security_group_ingress(
                            GroupId=sg['GroupId'],
                            IpPermissions=[{
                                'IpProtocol': '-1',
                                'IpRanges': [],
                                'PrefixListIds': [],
                                'UserIdGroupPairs': [{
                                    'GroupId': sg['GroupId'],
                                    'UserId': account_id
                                }]
                            }]
                        )
                        logger.info(f"Response from revoke_security_group_ingress call: {response}")

            logger.info(f"Completed default security group update for {sg['GroupId']}")

    except Exception as ex:
        logger.error(f"Failed executing: {str(ex)}", exc_info=True)
        # Send failure response to CloudFormation if 'ResponseURL' exists
        if 'ResponseURL' in event:
            cfresponse.send(event, context, cfresponse.FAILED, str(ex))
        # Return error response for non-CloudFormation invocations
        return {
            'statusCode': 500,
            'body': json.dumps({
                'message': f"Error occurred: {str(ex)}"
            })
        }
