# Import necessary libraries
import boto3  # AWS SDK for interacting with AWS services like Config
import json  # For handling JSON data

# Define a function to evaluate the compliance of the configuration item
def evaluate_compliance(configuration_item):
    """
    This function evaluates whether a security group complies with specific rules.
    
    :param configuration_item: A dictionary containing the configuration item details.
    :return: A dictionary containing the compliance type and annotation for further action.
    """
    # Start by assuming the security group is compliant
    compliance_type = "COMPLIANT"
    annotation = "Security group is compliant."
    
    # Check if the resource was deleted; if so, mark it as not applicable
    if configuration_item['configurationItemStatus'] == 'ResourceDeleted':
        compliance_type = "NOT_APPLICABLE"
        annotation = "This resource was deleted."
    
    # Check if the resource type is an EC2 security group, otherwise mark it not applicable
    elif configuration_item["resourceType"] not in ["AWS::EC2::SecurityGroup"]:
        compliance_type = "NOT_APPLICABLE"
        annotation = "The rule doesn't apply to resources of this type."

    else:
        # If the resource is a security group, iterate over the inbound rules (IpPermissions)
        for ip_permission in configuration_item['configuration']['ipPermissions']:
            # Check if there are any inbound rules allowing traffic from anywhere ('All' or '0.0.0.0/0')
            if ip_permission.get('fromPort') == -1:  # Allowing traffic on all ports (-1 means all ports)
                compliance_type = "NON_COMPLIANT"
                annotation = "Security group is not compliant: inbound rules allow all ports."
                break  # Break out of the loop on the first non-compliant rule
            # Similarly, check if the port allows all traffic from '0.0.0.0/0' (open to the world)
            if "0.0.0.0/0" in [cidr['cidrIp'] for cidr in ip_permission.get('ipv4Ranges', [])]:
                compliance_type = "NON_COMPLIANT"
                annotation = "Security group is not compliant: inbound rules allow all traffic from 0.0.0.0/0."
                break
    
    # Return the compliance type and annotation
    return {
        "compliance_type": compliance_type,
        "annotation": annotation
    }

# Lambda handler function (AWS Lambda entry point)
def lambda_handler(event, context):
    """
    The Lambda function handler that is triggered by AWS Config to evaluate security group compliance.
    
    :param event: The event that triggers the Lambda function, containing the configuration item.
    :param context: Runtime information provided by AWS Lambda.
    """
    # Parse the event to extract the configuration item
    invoking_event = json.loads(event["invokingEvent"])
    configuration_item = invoking_event["configurationItem"]
    
    # Evaluate the compliance of the configuration item
    evaluation = evaluate_compliance(configuration_item)
    
    # Log the results for monitoring or debugging purposes
    print(f"Compliance for {configuration_item['resourceId']}: {evaluation['compliance_type']}")
    print(f"Annotation: {evaluation['annotation']}")

    # Initialize AWS Config client
    config = boto3.client('config')
    
    # Send the compliance evaluation result back to AWS Config
    response = config.put_evaluations(
        Evaluations=[
            {
                'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],
                'ComplianceResourceId': invoking_event['configurationItem']['resourceId'],
                'ComplianceType': evaluation["compliance_type"],
                'Annotation': evaluation["annotation"],
                'OrderingTimestamp': invoking_event['configurationItem']['configurationItemCaptureTime']
            }
        ],
        ResultToken=event['resultToken']
    )

    return response  # Return the response from the put_evaluations call
